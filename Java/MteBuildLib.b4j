Version=4.7
AppType=StandardJava
NumberOfModules=4
Module1=Codegen
Module2=Run
Module3=PCODE
Module4=Codeblock
Build1=Default,com.macthomasengineering.jmteeval
NumberOfFiles=0
NumberOfLibraries=1
Library1=jcore
@EndOfDesignText@
'Non-UI application (console / server application)
#Region  Project Attributes 
    
	'#DebuggerDisableOptimizations: True

	#CommandLineArgs:
	#MergeLibraries: True 
	
	#LibraryVersion: 1.06
	#LibraryName: MteEval
	#LibraryAuthor: MacThomas Engineering

#End Region

Sub Process_Globals
	
	Private bDoDecompile = True As Boolean
		
End Sub

Sub AppStart (Args() As String)
	
	RunTests
	
End Sub

'*--------------------------------------------------------------------------
'*
'* RunTests - Run test cases
'*
'*
Private Sub RunTests
    Private cb As Codeblock
	
	cb.Initialize
	
	#if B4A or B4J
		'Mtelog.Start
	#end if		

	Log("-------------------------------")
	Log("MteEval Library v" & cb.Version )
	Log("-------------------------------")
	
 	DoTest(   0, "Avg test", "{|ref,inp|5+NumberFormat(avg(ref,inp),0,2)}",  Array (56.54,38.33), 52.44 )
  	DoTest(   1, "Add and Subtract", "{||5+6-3}",  Array (), 8 )
	DoTest(   2, "Divide By Zero", "{||5+6/0}",  Array (), 0 )
	DoTest(   3, "Cirumference of circle, radius=7", "{|r|2*r*CPi}",  Array (7), 43.98 )
	DoTest(   4, "Area of circle, radius=9", "{|r|CPi*(r*r)}",  Array (9), 254.47 )
	DoTest(   5, "Missing parenthesis", "{||35*3+6)}",  Array (5), 0  )
	DoTest(   6, "Min with iif()", "{|a,b| iif( a > b, b, a) }",  Array (7,12), 7 )
	DoTest(   7, "Find length of diagonal", "{|a,b| sqrt(a*a+b*b)}",  Array (7,9), 11.40 )
	DoTest(   8, "Report e", "{|| ce }", Array(), cE )
	DoTest(   9, "Kitchen Sink", "{|a,b,c,d,e,f|-abs(iif(a+c*f <= e/d*a, iif( min(a,d) >= max(c,e), b*b, c*c ), iif( 5 == c || 5 == e || 77 > 22 && !(10 < 3), Sqrt(c), Sqrt(d))))}", Array ( 34, 43, 17, 25,45, 13), -4.12 ) 
	DoTest(  10, "Sequence test", "{|| iif( 7 > 6, (1,2,3,4,5), (10,11,12)) }", Array (), 5 )
	DoTest(  11, "Bitwise operators", "{|r,g,b|((r & 0x0ff) << 16) | ((g & 0x0ff) << 8) | (b & 0x0ff)}",  Array (178,255,102), 11730790 )
	DoTest(  12, "Bit Not", "{|| ~0x6B2}",  Array (), 0xFFFFF94D )
	DoTest(  13, "Commission", "{|sales,r1,r2,r3| r1*sales + iif( sales > 200000, (sales-200000)*r3 + r2*100000,  iif( sales > 100000, (sales-100000)*r2, 0 )  ) }",  Array (320000,.08, .05, .03), 34200 )
	DoTest(  14, "Commission with assignments", "{|sales,r1,r2,r3,s100,s200| (iif( sales > 200000, (s200=sales-200000, s100=100000), s100=iif( sales > 100000, sales-100000, 0 )),sales*r1 + s100*r2 + s200*r3) }",  Array (320000,.08, .05, .03, 0, 0), 34200 )
	DoTest(  15, "Compare", "{|A1| 100 > A1 && A1 > 80 }",  Array (90), 1 )
	DoTest(  16, "CosD, SinD, TanD", "{|deg| TanD(deg) == SinD(deg)/CosD(deg) }",  Array (35), 1 )
  	DoTest(  17, "ATanD", "{|t|ATanD(t)}",  Array (1), 45 )
  	DoTest(  18, "Assignment", "{|a,b,c|(a=b=c,a)}",  Array (5,10,33), 33 )

	#if B4A or B4J
		'Mtelog.Stop
	#end if 

 End Sub
 
 '*--------------------------------------------------------------------------
'*
'* DoTest - Compile and run test case
'*
'*
 Private Sub DoTest ( nTestNumber As Int, sDescription As String, sCodeblockText As String, aArgs() As Object, nExpectedResult  As Double ) As Double
	Private cb As Codeblock
	Private nResult As Double
	Private sTestResult As String
	Private sExpectedResult As String
	Private const NO_GROUPING=False As Boolean
		
	cb.Initialize
	
	' Disable optimizations
	' cb.DisableOptimizations = True
	
	' Test description
	Log( "*********************************")
	Log( nTestNumber & " - " & sDescription )
	Log( "Codeblock=" & sCodeblockText	)
		

	' Compile and report error ( if any )		 
	cb.Compile( sCodeblockText )	
	If ( cb.Error <> cb.ERROR_NONE ) Then 
		Log( "Compile error=" & cb.Error )
		Log( "Error Description: " & cb.ErrorDesc)
		Log( "Error Detail: " & cb.ErrorDetail )
		Return	(0)
	End If
	Log( "Codeblock compiled.")
	
	' Evaluate Codeblock
	If ( aArgs.Length = 0 ) Then 
		nResult = cb.Eval
	Else 
		nResult = cb.Eval2( aArgs )	
	End If

	' Show results
	Log( "Codeblock executed.")
	
	#if B4A or B4J 
		Log( "Result=" & nResult & ",  Result in Hex=" & Bit.ToHexString( nResult).ToUpperCase ) 
	#else 		
		Log( "Result=" & nResult )
	#end if
	
	' Report error
	If ( cb.Error <> cb.ERROR_NONE ) Then 
		Log( "Eval() error=" & cb.Error )
		Log( "Error Description: " & cb.ErrorDesc)
		Log( "Error Detail: " & cb.ErrorDetail )
		Return ( nResult )
	End If

	' Convert result and expected result to two decimal places
	sTestResult     = NumberFormat2(nResult, 0, 2, 2, NO_GROUPING )
	sExpectedResult = NumberFormat2(nExpectedResult, 0, 2, 2, NO_GROUPING )

	' Confirm test executed correctly		
	If ( sTestResult <> sExpectedResult ) Then
		
		Log( "************************")
		Log( $"Error: Unexpected Result. ${sTestResult} != ${sExpectedResult}"$ )
		Log( "************************")
		
	End If
	
	If ( bDoDecompile ) Then 
	
		Private CodeListing As List 
		CodeListing = cb.Decompile
		Log( "------------------------")
		For Each sLine As String In CodeListing
			#if B4I 	
				Log( sLine )
			#else 
				'Mtelog.Console( sLine )
				Log( sLine )
			#end if
		Next
		Log( "------------------------")
	
	End If

	Return ( nResult ) 

End Sub
